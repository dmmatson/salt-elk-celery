input {
   file {
      type => syslog
      path => "/srv/logs/*.log*"
      start_position => beginning
   }
}

filter {
   if [type] == "syslog" {
      grok {
         match => { "message" => ["%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program} \[%{TIMESTAMP_ISO8601:celery_task_timestamp}: %{LOGLEVEL:celery_task_loglevel}/(?<celery_worker_process>MainProcess|Worker-[0-9]+)\] Received task: (?<celery_task_name>[a-z|_]+)\[%{UUID:celery_task_uuid}\]%{GREEDYDATA:celery_task_message}",
                                  "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program} \[%{TIMESTAMP_ISO8601:celery_task_timestamp}: %{LOGLEVEL:celery_task_loglevel}/(?<celery_worker_process>MainProcess|Worker-[0-9]+)\] (?<celery_task_name>[a-z|_]+)\[%{UUID:celery_task_uuid}\]: %{GREEDYDATA:celery_task_message}",
                                  "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program} \[%{TIMESTAMP_ISO8601:celery_task_timestamp}: %{LOGLEVEL:celery_task_loglevel}/(?<celery_worker_process>MainProcess|Worker-[0-9]+)\] Task (?<celery_task_name>[a-z|_]+)\[%{UUID:celery_task_uuid}\] succeeded in %{NUMBER:celery_task_runtime:float}s: %{GREEDYDATA:celery_task_return}"] }
         add_tag => [ "celery_task" ]
      }
      syslog_pri { }
      date {
         match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
         locale => "en"
         target => "@timestamp"
         add_tag => "timestamp_filtered"
      }
   }
}

output {
   stdout { codec => rubydebug }
   elasticsearch {
      host => localhost
      embedded => false
      protocol => http
   }
}